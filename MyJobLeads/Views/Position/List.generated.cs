#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyJobLeads.Views.Position
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using MyJobLeads.Infrastructure.HtmlHelpers;
    using Telerik.Web.Mvc.UI;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "1.2.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Position/List.cshtml")]
    public class List : System.Web.Mvc.WebViewPage<MyJobLeads.DomainModel.ViewModels.Positions.PositionListViewModel>
    {
        public List()
        {
        }
        public override void Execute()
        {

WriteLiteral("\r\n");


            
            #line 3 "..\..\Views\Position\List.cshtml"
  
    ViewBag.Title = "Position List";


            
            #line default
            #line hidden
WriteLiteral("\r\n");


DefineSection("SideBar", () => {

WriteLiteral("\r\n");


            
            #line 8 "..\..\Views\Position\List.cshtml"
      Html.RenderAction(MVC.Home.SidebarDisplay(MyJobLeads.Controllers.ActiveSidebarLink.Positions));

            
            #line default
            #line hidden

});

WriteLiteral("\r\n\r\n<div class=\"grid1 floatLeft\">\r\n    <div class=\"lineSeperator\">\r\n        <div " +
"class=\"pageInfoBox\">\r\n");


            
            #line 14 "..\..\Views\Position\List.cshtml"
             using (Html.BeginForm(MVC.Company.ChangeCompanyStatusFilters()))
            {

            
            #line default
            #line hidden
WriteLiteral("                <div class=\"grid3 floatLeft\">\r\n                    <h3 class=\"flo" +
"atLeft\">All Entered Positions</h3>\r\n                    <p class=\"floatRight gre" +
"yHighlight\">You have ");


            
            #line 18 "..\..\Views\Position\List.cshtml"
                                                             Write(Model.Positions.Count == 0 ? "no" : Model.Positions.Count.ToString());

            
            #line default
            #line hidden
WriteLiteral(" positions entered</p>\r\n                </div>\r\n");


            
            #line 20 "..\..\Views\Position\List.cshtml"


            
            #line default
            #line hidden
WriteLiteral("                <div class=\"grid3 marginBottom_10 floatLeft\">\r\n                  " +
"  ");



WriteLiteral("\r\n                </div>\r\n");


            
            #line 24 "..\..\Views\Position\List.cshtml"
                
            
            #line default
            #line hidden

            
            #line 47 "..\..\Views\Position\List.cshtml"
                    
            }

            
            #line default
            #line hidden
WriteLiteral("            <div class=\"clear\"></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div" +
" class=\"grid1 marginTop_20 floatLeft\"> \r\n    <div class=\"grid2 floatLeft\"> \r\n   " +
"     <h3 class=\"taskCalls\">Not Yet Applied (");


            
            #line 56 "..\..\Views\Position\List.cshtml"
                                          Write(Model.Positions.Where(x => !x.HasApplied).Count());

            
            #line default
            #line hidden
WriteLiteral(")</h3>\r\n\r\n        <div id=\"taskRole\">\r\n            <ul>\r\n");


            
            #line 60 "..\..\Views\Position\List.cshtml"
                 if (Model.Positions.Where(x => !x.HasApplied).Count() != 0)
                {
                    foreach (var position in Model.Positions.Where(x => !x.HasApplied).OrderBy(x => x.Company.Name).ThenBy(x => x.Title))
                    {

            
            #line default
            #line hidden
WriteLiteral("                        <li>\r\n                            <a href=\"");


            
            #line 65 "..\..\Views\Position\List.cshtml"
                                Write(Url.Action(MVC.Position.Details(position.Id)));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                <div class=\"taskName\">");


            
            #line 66 "..\..\Views\Position\List.cshtml"
                                                 Write(position.Title);

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n                                <div class=\"taskDescription\">Company: ");


            
            #line 67 "..\..\Views\Position\List.cshtml"
                                                                 Write(position.Company.Name);

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n                                <div class=\"taskDescription\">");


            
            #line 68 "..\..\Views\Position\List.cshtml"
                                                        Write(Html.ShortString(position.Notes, 85));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n                            </a>\r\n                        </li>\r\n");


            
            #line 71 "..\..\Views\Position\List.cshtml"
                    }
                }

            
            #line default
            #line hidden
WriteLiteral("            </ul>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"grid2 floatRight" +
"\">\r\n        <h3 class=\"taskCalls\">Already Applied (");


            
            #line 78 "..\..\Views\Position\List.cshtml"
                                          Write(Model.Positions.Where(x => x.HasApplied).Count());

            
            #line default
            #line hidden
WriteLiteral(")</h3>\r\n\r\n        <div id=\"taskRole\">\r\n            <ul>\r\n");


            
            #line 82 "..\..\Views\Position\List.cshtml"
                 if (Model.Positions.Where(x => x.HasApplied).Count() != 0)
                {
                    foreach (var position in Model.Positions.Where(x => x.HasApplied).OrderBy(x => x.Company.Name).ThenBy(x => x.Title))
                    {

            
            #line default
            #line hidden
WriteLiteral("                        <li>\r\n                            <a href=\"");


            
            #line 87 "..\..\Views\Position\List.cshtml"
                                Write(Url.Action(MVC.Position.Details(position.Id)));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                <div class=\"taskName\">");


            
            #line 88 "..\..\Views\Position\List.cshtml"
                                                 Write(position.Title);

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n                                <div class=\"taskDescription\">Company: ");


            
            #line 89 "..\..\Views\Position\List.cshtml"
                                                                 Write(position.Company.Name);

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n                                <div class=\"taskDescription\">");


            
            #line 90 "..\..\Views\Position\List.cshtml"
                                                        Write(Html.ShortString(position.Notes, 85));

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n                            </a>\r\n                        </li>\r\n");


            
            #line 93 "..\..\Views\Position\List.cshtml"
                    }
                }

            
            #line default
            #line hidden
WriteLiteral("            </ul>\r\n        </div>\r\n    </div>\r\n</div>");


        }
    }
}
#pragma warning restore 1591
